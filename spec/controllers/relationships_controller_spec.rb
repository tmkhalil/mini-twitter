require 'rails_helper'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec. Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
RSpec.describe RelationshipsController, :type => :controller do
before(:each) do
@user = FactoryGirl.create(:user,:email=>"fake3@gmail.com",:password=>123456789)
@another_user = FactoryGirl.create(:user,:email=>"fake4@gmail.com",:password=>123456789)
sign_in @user
sign_in @another_user
end
it "following number increases when I follow someone" do
Relationship.create(:follower_id => @user.id, :followed_id => @another_user.id)
expect(@user.followed_users.count).to be > 0
expect(@another_user.followers.count).to be > 0
end
it "following number decreases when I unfollow someone" do
relation = Relationship.create(:follower_id => @user.id, :followed_id => @another_user.id)
relation.destroy
expect(@user.followed_users.count).to eql(0)
expect(@another_user.followers.count).to eql(0)
end
end
